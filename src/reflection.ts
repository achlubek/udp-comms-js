// This file was autogenerated by aero-di. It is recommended to not change it

export interface ParameterData {
  name: string;
  type: string;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type Constructor = new (...args: any[]) => any;
export interface ClassData {
  fqcn: string;
  name: string;
  ctor: Promise<Constructor>;
  implementsInterfaces: string[];
  extendsClass: string | null;
  constructorParameters: ParameterData[];
}
export const classesReflection: ClassData[] = [
  {
    fqcn: "event-handlers/RequestServiceDescriptorsEventHandler/RequestServiceDescriptorsEventHandler",
    name: "RequestServiceDescriptorsEventHandler",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import(
          "./event-handlers/RequestServiceDescriptorsEventHandler"
        ).then((imp) => r(imp.RequestServiceDescriptorsEventHandler))
    ),
    implementsInterfaces: ["EventHandlerInterface"],
    extendsClass: null,
    constructorParameters: [
      { name: "runtime", type: "ServiceRuntime" },
      { name: "commandBus", type: "CommandBus" },
      { name: "queryBus", type: "QueryBus" },
      { name: "eventBus", type: "EventBus" },
    ],
  },
  {
    fqcn: "event-handlers/ServiceStartedEventHandler/ServiceStartedEventHandler",
    name: "ServiceStartedEventHandler",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./event-handlers/ServiceStartedEventHandler").then((imp) =>
          r(imp.ServiceStartedEventHandler)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [{ name: "logger", type: "LoggerInterface" }],
  },
  {
    fqcn: "event-handlers/ServiceStoppedEventHandler/ServiceStoppedEventHandler",
    name: "ServiceStoppedEventHandler",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./event-handlers/ServiceStoppedEventHandler").then((imp) =>
          r(imp.ServiceStoppedEventHandler)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [{ name: "logger", type: "LoggerInterface" }],
  },
  {
    fqcn: "configuration/Configuration/ConfigurationValidationFailedException",
    name: "ConfigurationValidationFailedException",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./configuration/Configuration").then((imp) =>
          r(imp.ConfigurationValidationFailedException)
        )
    ),
    implementsInterfaces: [],
    extendsClass: "Error",
    constructorParameters: [],
  },
  {
    fqcn: "configuration/Configuration/Configuration",
    name: "Configuration",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./configuration/Configuration").then((imp) =>
          r(imp.Configuration)
        )
    ),
    implementsInterfaces: ["ConfigurationInterface"],
    extendsClass: null,
    constructorParameters: [],
  },
  {
    fqcn: "events/RequestServicesDescriptorsEvent/RequestServiceDescriptorsEvent",
    name: "RequestServiceDescriptorsEvent",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./events/RequestServicesDescriptorsEvent").then((imp) =>
          r(imp.RequestServiceDescriptorsEvent)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [],
  },
  {
    fqcn: "events/ServiceDescriptorEvent/ServiceDescriptorEvent",
    name: "ServiceDescriptorEvent",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./events/ServiceDescriptorEvent").then((imp) =>
          r(imp.ServiceDescriptorEvent)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [
      { name: "name", type: "public readonly" },
      { name: "commandHandlers", type: "string[]" },
      { name: "queryHandlers", type: "string[]" },
      { name: "eventHandlers", type: "string[]" },
    ],
  },
  {
    fqcn: "events/ServiceStartedEvent/ServiceStartedEvent",
    name: "ServiceStartedEvent",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./events/ServiceStartedEvent").then((imp) =>
          r(imp.ServiceStartedEvent)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [{ name: "name", type: "string" }],
  },
  {
    fqcn: "events/ServiceStoppedEvent/ServiceStoppedEvent",
    name: "ServiceStoppedEvent",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./events/ServiceStoppedEvent").then((imp) =>
          r(imp.ServiceStoppedEvent)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [{ name: "name", type: "string" }],
  },
  {
    fqcn: "logger/Logger/Logger",
    name: "Logger",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) => void import("./logger/Logger").then((imp) => r(imp.Logger))
    ),
    implementsInterfaces: ["LoggerInterface"],
    extendsClass: null,
    constructorParameters: [
      { name: "configurationInterface", type: "ConfigurationInterface" },
    ],
  },
  {
    fqcn: "queries/GetServiceDescriptorQuery/GetServiceDescriptorQuery",
    name: "GetServiceDescriptorQuery",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./queries/GetServiceDescriptorQuery").then((imp) =>
          r(imp.GetServiceDescriptorQuery)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [],
  },
  {
    fqcn: "query-handlers/GetServiceDescriptorQueryHandler/GetServiceDescriptorQueryHandler",
    name: "GetServiceDescriptorQueryHandler",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./query-handlers/GetServiceDescriptorQueryHandler").then(
          (imp) => r(imp.GetServiceDescriptorQueryHandler)
        )
    ),
    implementsInterfaces: ["QueryHandlerInterface"],
    extendsClass: null,
    constructorParameters: [
      { name: "runtime", type: "ServiceRuntime" },
      { name: "commandBus", type: "CommandBus" },
      { name: "queryBus", type: "QueryBus" },
      { name: "eventBus", type: "EventBus" },
    ],
  },
  {
    fqcn: "transport/SignalDecoder/SignalDecoder",
    name: "SignalDecoder",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./transport/SignalDecoder").then((imp) =>
          r(imp.SignalDecoder)
        )
    ),
    implementsInterfaces: ["SignalDecoderInterface"],
    extendsClass: null,
    constructorParameters: [],
  },
  {
    fqcn: "transport/SignalEncoder/SignalEncoder",
    name: "SignalEncoder",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./transport/SignalEncoder").then((imp) =>
          r(imp.SignalEncoder)
        )
    ),
    implementsInterfaces: ["SignalEncoderInterface"],
    extendsClass: null,
    constructorParameters: [],
  },
  {
    fqcn: "transport/UdpComms/NotConnectedException",
    name: "NotConnectedException",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./transport/UdpComms").then((imp) =>
          r(imp.NotConnectedException)
        )
    ),
    implementsInterfaces: [],
    extendsClass: "Error",
    constructorParameters: [],
  },
  {
    fqcn: "transport/UdpComms/UdpComms",
    name: "UdpComms",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) => void import("./transport/UdpComms").then((imp) => r(imp.UdpComms))
    ),
    implementsInterfaces: ["UdpCommsInterface"],
    extendsClass: null,
    constructorParameters: [
      { name: "logger", type: "Logger" },
      { name: "configurationInterface", type: "ConfigurationInterface" },
    ],
  },
  {
    fqcn: "runtime/ServiceRuntime/NotStartedException",
    name: "NotStartedException",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./runtime/ServiceRuntime").then((imp) =>
          r(imp.NotStartedException)
        )
    ),
    implementsInterfaces: [],
    extendsClass: "Error",
    constructorParameters: [],
  },
  {
    fqcn: "runtime/ServiceRuntime/AlreadyStartedException",
    name: "AlreadyStartedException",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./runtime/ServiceRuntime").then((imp) =>
          r(imp.AlreadyStartedException)
        )
    ),
    implementsInterfaces: [],
    extendsClass: "Error",
    constructorParameters: [],
  },
  {
    fqcn: "runtime/ServiceRuntime/ServiceRuntime",
    name: "ServiceRuntime",
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ctor: new Promise(
      (r) =>
        void import("./runtime/ServiceRuntime").then((imp) =>
          r(imp.ServiceRuntime)
        )
    ),
    implementsInterfaces: [],
    extendsClass: null,
    constructorParameters: [
      { name: "di", type: "AeroDI" },
      { name: "configurationInterface", type: "ConfigurationInterface" },
      { name: "logger", type: "LoggerInterface" },
      { name: "udpComms", type: "UdpCommsInterface" },
      { name: "signalEncoder", type: "SignalEncoderInterface" },
      { name: "signalDecoder", type: "SignalDecoderInterface" },
      { name: "commandBus", type: "CommandBus" },
      { name: "eventBus", type: "EventBus" },
      { name: "queryBus", type: "QueryBus" },
      { name: "timeouts", type: "Timeouts" },
    ],
  },
];
